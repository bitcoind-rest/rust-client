/* 
 * Bitcoind
 *
 * The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.
 *
 * OpenAPI spec version: 0.16
 * Contact: johan@lepetitbloc.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Bip {
  /// The BIP number, or ? before being assigned
  #[serde(rename = "id")]
  id: Option<String>,
  /// The BIP version number
  #[serde(rename = "version")]
  version: Option<i32>,
  #[serde(rename = "reject")]
  reject: Option<::models::BipReject>
}

impl Bip {
  pub fn new() -> Bip {
    Bip {
      id: None,
      version: None,
      reject: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> Bip {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_version(&mut self, version: i32) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: i32) -> Bip {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&i32> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

  pub fn set_reject(&mut self, reject: ::models::BipReject) {
    self.reject = Some(reject);
  }

  pub fn with_reject(mut self, reject: ::models::BipReject) -> Bip {
    self.reject = Some(reject);
    self
  }

  pub fn reject(&self) -> Option<&::models::BipReject> {
    self.reject.as_ref()
  }

  pub fn reset_reject(&mut self) {
    self.reject = None;
  }

}




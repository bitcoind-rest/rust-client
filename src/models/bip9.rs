/* 
 * Bitcoind
 *
 * The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.
 *
 * OpenAPI spec version: 0.16
 * Contact: johan@lepetitbloc.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Bip9 {
  #[serde(rename = "status")]
  status: Option<String>,
  /// The starttime specifies a minimum median time past of a block at which the bit gains its meaning.
  #[serde(rename = "startTime")]
  start_time: Option<i64>,
  /// The timeout specifies a time at which the deployment is considered failed. If the median time past of a block >= timeout and the soft fork has not yet locked in (including this block's bit state), the deployment is considered failed on all descendants of the block.
  #[serde(rename = "timeout")]
  timeout: Option<i64>,
  #[serde(rename = "since")]
  since: Option<i64>
}

impl Bip9 {
  pub fn new() -> Bip9 {
    Bip9 {
      status: None,
      start_time: None,
      timeout: None,
      since: None
    }
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> Bip9 {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_start_time(&mut self, start_time: i64) {
    self.start_time = Some(start_time);
  }

  pub fn with_start_time(mut self, start_time: i64) -> Bip9 {
    self.start_time = Some(start_time);
    self
  }

  pub fn start_time(&self) -> Option<&i64> {
    self.start_time.as_ref()
  }

  pub fn reset_start_time(&mut self) {
    self.start_time = None;
  }

  pub fn set_timeout(&mut self, timeout: i64) {
    self.timeout = Some(timeout);
  }

  pub fn with_timeout(mut self, timeout: i64) -> Bip9 {
    self.timeout = Some(timeout);
    self
  }

  pub fn timeout(&self) -> Option<&i64> {
    self.timeout.as_ref()
  }

  pub fn reset_timeout(&mut self) {
    self.timeout = None;
  }

  pub fn set_since(&mut self, since: i64) {
    self.since = Some(since);
  }

  pub fn with_since(mut self, since: i64) -> Bip9 {
    self.since = Some(since);
    self
  }

  pub fn since(&self) -> Option<&i64> {
    self.since.as_ref()
  }

  pub fn reset_since(&mut self) {
    self.since = None;
  }

}




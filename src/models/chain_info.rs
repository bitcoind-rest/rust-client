/* 
 * Bitcoind
 *
 * The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.
 *
 * OpenAPI spec version: 0.16
 * Contact: johan@lepetitbloc.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChainInfo {
  /// Current network name as defined in BIP70 (main, test, regtest)
  #[serde(rename = "chain")]
  chain: Option<String>,
  /// The current number of blocks processed in the server
  #[serde(rename = "blocks")]
  blocks: Option<i64>,
  /// The current number of headers we have validated
  #[serde(rename = "headers")]
  headers: Option<i64>,
  /// The hash of the currently best block
  #[serde(rename = "bestblockhash")]
  bestblockhash: Option<String>,
  /// The current difficulty
  #[serde(rename = "difficulty")]
  difficulty: Option<i64>,
  /// The median time of the 11 blocks before the most recent block on the blockchain
  #[serde(rename = "mediantime")]
  mediantime: Option<i32>,
  /// Estimate of verification progress [0..1]
  #[serde(rename = "verificationprogress")]
  verificationprogress: Option<i32>,
  #[serde(rename = "initialblockdownload")]
  initialblockdownload: Option<bool>,
  /// Total amount of work in active chain, in hexadecimal
  #[serde(rename = "chainwork")]
  chainwork: Option<String>,
  #[serde(rename = "size_on_disk")]
  size_on_disk: Option<i64>,
  /// If the blocks are subject to pruning
  #[serde(rename = "pruned")]
  pruned: Option<bool>,
  /// status of softforks in progress
  #[serde(rename = "softforks")]
  softforks: Option<Vec<::models::Bip>>,
  #[serde(rename = "bip9_softforks")]
  bip9_softforks: Option<::models::ChainInfoBip9Softforks>,
  /// An eventual warning on the current build status.
  #[serde(rename = "warnings")]
  warnings: Option<String>
}

impl ChainInfo {
  pub fn new() -> ChainInfo {
    ChainInfo {
      chain: None,
      blocks: None,
      headers: None,
      bestblockhash: None,
      difficulty: None,
      mediantime: None,
      verificationprogress: None,
      initialblockdownload: None,
      chainwork: None,
      size_on_disk: None,
      pruned: None,
      softforks: None,
      bip9_softforks: None,
      warnings: None
    }
  }

  pub fn set_chain(&mut self, chain: String) {
    self.chain = Some(chain);
  }

  pub fn with_chain(mut self, chain: String) -> ChainInfo {
    self.chain = Some(chain);
    self
  }

  pub fn chain(&self) -> Option<&String> {
    self.chain.as_ref()
  }

  pub fn reset_chain(&mut self) {
    self.chain = None;
  }

  pub fn set_blocks(&mut self, blocks: i64) {
    self.blocks = Some(blocks);
  }

  pub fn with_blocks(mut self, blocks: i64) -> ChainInfo {
    self.blocks = Some(blocks);
    self
  }

  pub fn blocks(&self) -> Option<&i64> {
    self.blocks.as_ref()
  }

  pub fn reset_blocks(&mut self) {
    self.blocks = None;
  }

  pub fn set_headers(&mut self, headers: i64) {
    self.headers = Some(headers);
  }

  pub fn with_headers(mut self, headers: i64) -> ChainInfo {
    self.headers = Some(headers);
    self
  }

  pub fn headers(&self) -> Option<&i64> {
    self.headers.as_ref()
  }

  pub fn reset_headers(&mut self) {
    self.headers = None;
  }

  pub fn set_bestblockhash(&mut self, bestblockhash: String) {
    self.bestblockhash = Some(bestblockhash);
  }

  pub fn with_bestblockhash(mut self, bestblockhash: String) -> ChainInfo {
    self.bestblockhash = Some(bestblockhash);
    self
  }

  pub fn bestblockhash(&self) -> Option<&String> {
    self.bestblockhash.as_ref()
  }

  pub fn reset_bestblockhash(&mut self) {
    self.bestblockhash = None;
  }

  pub fn set_difficulty(&mut self, difficulty: i64) {
    self.difficulty = Some(difficulty);
  }

  pub fn with_difficulty(mut self, difficulty: i64) -> ChainInfo {
    self.difficulty = Some(difficulty);
    self
  }

  pub fn difficulty(&self) -> Option<&i64> {
    self.difficulty.as_ref()
  }

  pub fn reset_difficulty(&mut self) {
    self.difficulty = None;
  }

  pub fn set_mediantime(&mut self, mediantime: i32) {
    self.mediantime = Some(mediantime);
  }

  pub fn with_mediantime(mut self, mediantime: i32) -> ChainInfo {
    self.mediantime = Some(mediantime);
    self
  }

  pub fn mediantime(&self) -> Option<&i32> {
    self.mediantime.as_ref()
  }

  pub fn reset_mediantime(&mut self) {
    self.mediantime = None;
  }

  pub fn set_verificationprogress(&mut self, verificationprogress: i32) {
    self.verificationprogress = Some(verificationprogress);
  }

  pub fn with_verificationprogress(mut self, verificationprogress: i32) -> ChainInfo {
    self.verificationprogress = Some(verificationprogress);
    self
  }

  pub fn verificationprogress(&self) -> Option<&i32> {
    self.verificationprogress.as_ref()
  }

  pub fn reset_verificationprogress(&mut self) {
    self.verificationprogress = None;
  }

  pub fn set_initialblockdownload(&mut self, initialblockdownload: bool) {
    self.initialblockdownload = Some(initialblockdownload);
  }

  pub fn with_initialblockdownload(mut self, initialblockdownload: bool) -> ChainInfo {
    self.initialblockdownload = Some(initialblockdownload);
    self
  }

  pub fn initialblockdownload(&self) -> Option<&bool> {
    self.initialblockdownload.as_ref()
  }

  pub fn reset_initialblockdownload(&mut self) {
    self.initialblockdownload = None;
  }

  pub fn set_chainwork(&mut self, chainwork: String) {
    self.chainwork = Some(chainwork);
  }

  pub fn with_chainwork(mut self, chainwork: String) -> ChainInfo {
    self.chainwork = Some(chainwork);
    self
  }

  pub fn chainwork(&self) -> Option<&String> {
    self.chainwork.as_ref()
  }

  pub fn reset_chainwork(&mut self) {
    self.chainwork = None;
  }

  pub fn set_size_on_disk(&mut self, size_on_disk: i64) {
    self.size_on_disk = Some(size_on_disk);
  }

  pub fn with_size_on_disk(mut self, size_on_disk: i64) -> ChainInfo {
    self.size_on_disk = Some(size_on_disk);
    self
  }

  pub fn size_on_disk(&self) -> Option<&i64> {
    self.size_on_disk.as_ref()
  }

  pub fn reset_size_on_disk(&mut self) {
    self.size_on_disk = None;
  }

  pub fn set_pruned(&mut self, pruned: bool) {
    self.pruned = Some(pruned);
  }

  pub fn with_pruned(mut self, pruned: bool) -> ChainInfo {
    self.pruned = Some(pruned);
    self
  }

  pub fn pruned(&self) -> Option<&bool> {
    self.pruned.as_ref()
  }

  pub fn reset_pruned(&mut self) {
    self.pruned = None;
  }

  pub fn set_softforks(&mut self, softforks: Vec<::models::Bip>) {
    self.softforks = Some(softforks);
  }

  pub fn with_softforks(mut self, softforks: Vec<::models::Bip>) -> ChainInfo {
    self.softforks = Some(softforks);
    self
  }

  pub fn softforks(&self) -> Option<&Vec<::models::Bip>> {
    self.softforks.as_ref()
  }

  pub fn reset_softforks(&mut self) {
    self.softforks = None;
  }

  pub fn set_bip9_softforks(&mut self, bip9_softforks: ::models::ChainInfoBip9Softforks) {
    self.bip9_softforks = Some(bip9_softforks);
  }

  pub fn with_bip9_softforks(mut self, bip9_softforks: ::models::ChainInfoBip9Softforks) -> ChainInfo {
    self.bip9_softforks = Some(bip9_softforks);
    self
  }

  pub fn bip9_softforks(&self) -> Option<&::models::ChainInfoBip9Softforks> {
    self.bip9_softforks.as_ref()
  }

  pub fn reset_bip9_softforks(&mut self) {
    self.bip9_softforks = None;
  }

  pub fn set_warnings(&mut self, warnings: String) {
    self.warnings = Some(warnings);
  }

  pub fn with_warnings(mut self, warnings: String) -> ChainInfo {
    self.warnings = Some(warnings);
    self
  }

  pub fn warnings(&self) -> Option<&String> {
    self.warnings.as_ref()
  }

  pub fn reset_warnings(&mut self) {
    self.warnings = None;
  }

}




/* 
 * Bitcoind
 *
 * The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.
 *
 * OpenAPI spec version: 0.16
 * Contact: johan@lepetitbloc.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse200 {
  #[serde(rename = "chainHeight")]
  chain_height: Option<i32>,
  #[serde(rename = "chaintipHash")]
  chaintip_hash: Option<String>,
  #[serde(rename = "bitmap")]
  bitmap: Option<String>,
  #[serde(rename = "utxos")]
  utxos: Option<Vec<::models::UTxO>>
}

impl InlineResponse200 {
  pub fn new() -> InlineResponse200 {
    InlineResponse200 {
      chain_height: None,
      chaintip_hash: None,
      bitmap: None,
      utxos: None
    }
  }

  pub fn set_chain_height(&mut self, chain_height: i32) {
    self.chain_height = Some(chain_height);
  }

  pub fn with_chain_height(mut self, chain_height: i32) -> InlineResponse200 {
    self.chain_height = Some(chain_height);
    self
  }

  pub fn chain_height(&self) -> Option<&i32> {
    self.chain_height.as_ref()
  }

  pub fn reset_chain_height(&mut self) {
    self.chain_height = None;
  }

  pub fn set_chaintip_hash(&mut self, chaintip_hash: String) {
    self.chaintip_hash = Some(chaintip_hash);
  }

  pub fn with_chaintip_hash(mut self, chaintip_hash: String) -> InlineResponse200 {
    self.chaintip_hash = Some(chaintip_hash);
    self
  }

  pub fn chaintip_hash(&self) -> Option<&String> {
    self.chaintip_hash.as_ref()
  }

  pub fn reset_chaintip_hash(&mut self) {
    self.chaintip_hash = None;
  }

  pub fn set_bitmap(&mut self, bitmap: String) {
    self.bitmap = Some(bitmap);
  }

  pub fn with_bitmap(mut self, bitmap: String) -> InlineResponse200 {
    self.bitmap = Some(bitmap);
    self
  }

  pub fn bitmap(&self) -> Option<&String> {
    self.bitmap.as_ref()
  }

  pub fn reset_bitmap(&mut self) {
    self.bitmap = None;
  }

  pub fn set_utxos(&mut self, utxos: Vec<::models::UTxO>) {
    self.utxos = Some(utxos);
  }

  pub fn with_utxos(mut self, utxos: Vec<::models::UTxO>) -> InlineResponse200 {
    self.utxos = Some(utxos);
    self
  }

  pub fn utxos(&self) -> Option<&Vec<::models::UTxO>> {
    self.utxos.as_ref()
  }

  pub fn reset_utxos(&mut self) {
    self.utxos = None;
  }

}




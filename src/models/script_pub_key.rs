/* 
 * Bitcoind
 *
 * The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.
 *
 * OpenAPI spec version: 0.16
 * Contact: johan@lepetitbloc.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ScriptPubKey {
  #[serde(rename = "asm")]
  asm: Option<String>,
  #[serde(rename = "hex")]
  hex: Option<String>,
  #[serde(rename = "reqSigs")]
  req_sigs: Option<i32>,
  #[serde(rename = "type")]
  _type: Option<String>,
  #[serde(rename = "addresses")]
  addresses: Option<Vec<String>>
}

impl ScriptPubKey {
  pub fn new() -> ScriptPubKey {
    ScriptPubKey {
      asm: None,
      hex: None,
      req_sigs: None,
      _type: None,
      addresses: None
    }
  }

  pub fn set_asm(&mut self, asm: String) {
    self.asm = Some(asm);
  }

  pub fn with_asm(mut self, asm: String) -> ScriptPubKey {
    self.asm = Some(asm);
    self
  }

  pub fn asm(&self) -> Option<&String> {
    self.asm.as_ref()
  }

  pub fn reset_asm(&mut self) {
    self.asm = None;
  }

  pub fn set_hex(&mut self, hex: String) {
    self.hex = Some(hex);
  }

  pub fn with_hex(mut self, hex: String) -> ScriptPubKey {
    self.hex = Some(hex);
    self
  }

  pub fn hex(&self) -> Option<&String> {
    self.hex.as_ref()
  }

  pub fn reset_hex(&mut self) {
    self.hex = None;
  }

  pub fn set_req_sigs(&mut self, req_sigs: i32) {
    self.req_sigs = Some(req_sigs);
  }

  pub fn with_req_sigs(mut self, req_sigs: i32) -> ScriptPubKey {
    self.req_sigs = Some(req_sigs);
    self
  }

  pub fn req_sigs(&self) -> Option<&i32> {
    self.req_sigs.as_ref()
  }

  pub fn reset_req_sigs(&mut self) {
    self.req_sigs = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> ScriptPubKey {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_addresses(&mut self, addresses: Vec<String>) {
    self.addresses = Some(addresses);
  }

  pub fn with_addresses(mut self, addresses: Vec<String>) -> ScriptPubKey {
    self.addresses = Some(addresses);
    self
  }

  pub fn addresses(&self) -> Option<&Vec<String>> {
    self.addresses.as_ref()
  }

  pub fn reset_addresses(&mut self) {
    self.addresses = None;
  }

}



